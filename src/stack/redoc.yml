version: '3.9'

#ref
#   https://hub.docker.com/r/dockurr/dnsmasq

#Docs
#   https://github.com/pantsel/konga
#   https://pantsel.github.io/konga/
#   https://github.com/codeedu/apigateway-kong/blob/main/docker-kong/docker-compose.yaml
#   https://github.com/hunter-ji/kong-konga-docker-compose/blob/master/docker-compose-production.yml

networks:
  stack-nt:
    name: ${STACK_NETWORK_DEFAULT}
    external: true
  stack-nt-security:
    name: ${STACK_NETWORK_SECURITY}
    external: true

services:

  db:
    image: ${STACK_SERVICE_IMAGE_REDIS}
    hostname: ${STACK_SERVICE_HOSTNAME}-db
    volumes:
      - ${STACK_SERVICE_STORAGE_DATA_DIR}:/data
    environment:
      TZ: ${STACK_TZ}
      REDIS_PASSWORD: ${STACK_SERVICE_DEFAULT_PASS}
    #command: redis-server --requirepass sua_senha   # Configure a senha do Redis
    # ports:
    #   - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      mode: global
      placement:
        constraints:
          - ${APPLICATION_DEPLOY_NODE_DB}
      resources:
        limits:
          cpus: "${APPLICATION_DEPLOY_CPU}"
          memory: ${APPLICATION_DEPLOY_MEMORY}
      restart_policy:
        condition: any
    networks:
      - stack-nt-security

  # redis_commander:
  #   image: rediscommander/redis-commander:latest
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=6379
  #     - REDIS_DB=0
  #     - REDIS_PASSWORD=sua_senha   # Configure a senha do Redis
  #   depends_on:
  #     - redis

  srv:
    image: ${STACK_SERVICE_IMAGE_URL}
    hostname: ${STACK_SERVICE_HOSTNAME}
    depends_on:
      - prepare
    # volumes:
    #   - "./ssl:/mnt/ssl"
    environment:
      TZ: ${STACK_TZ}

    # ports:
    #   - "80:80"
    deploy:
      mode: global
      placement:
        constraints:
          - ${APPLICATION_DEPLOY_NODE_TOOL}
      resources:
        limits:
          cpus: "${APPLICATION_DEPLOY_CPU}"
          memory: ${APPLICATION_DEPLOY_MEMORY}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: any
      labels:
        - traefik.docker.network=${STACK_NETWORK_DEFAULT}
        - traefik.http.routers.${STACK_SERVICE_NAME}.entryPoints=http,https
        - traefik.http.routers.${STACK_SERVICE_NAME}.tls=${STACK_TRAEFIK_TLS_ENABLED}
        - traefik.http.routers.${STACK_SERVICE_NAME}.rule=HostRegexp(`{subdomain:${STACK_SERVICE_HOSTNAME_PROXY}.*}`)
        - traefik.http.routers.${STACK_SERVICE_NAME}.service=${STACK_SERVICE_NAME}
        - traefik.http.services.${STACK_SERVICE_NAME}.loadbalancer.server.port=80
    networks:
      - stack-nt
      - stack-nt-security
