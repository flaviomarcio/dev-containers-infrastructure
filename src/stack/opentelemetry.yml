version: '3.9'

#https://github.com/traefik/traefik/issues/7855

#ref
# https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/examples/tracing/docker-compose.yml
# https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/examples/tracing/otel-collector-config.yml
# olds
#   https://github.com/open-telemetry/opentelemetry-demo
#   https://github.com/open-telemetry/opentelemetry-demo/blob/main/docker-compose.yml
#   https://github.com/open-telemetry/opentelemetry-demo/blob/main/src/otelcollector/otelcol-config.yml
#   https://www.jaegertracing.io/docs/1.6/deployment/

networks:
  stack-nt:
    name: ${STACK_NETWORK_DEFAULT}
    external: true
  stack-nt-sre:
    name: ${STACK_NETWORK_SRE}
    external: true

services:

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    hostname: ${STACK_SERVICE_HOSTNAME}
    environment:
      TZ: ${STACK_TZ}
      COLLECTOR_OTLP_ENABLED: "true"
      METRICS_STORAGE_TYPE: prometheus
    command:
      - "--memory.max-traces"
      - "10000"
      - "--query.base-path"
      - "/jaeger/ui"
      - "--prometheus.server-url"
      - "http://prometheus_srv"
    # ports:
    #   - "16686:16686"
    #   - "14250"
    #   - target: 4317
    #     protocol: tcp
    #     mode: ingress

    #   - target: 5778
    #     protocol: tcp
    #     mode: host

    #   - target: 14268
    #     protocol: tcp
    #     mode: host

    #   # - "4317"                           
    #   # - "5778"
    #   # - "14268"
    deploy:
      mode: global
      placement:
        constraints:
          - ${APPLICATION_DEPLOY_NODE_TOOL}
      resources:
        limits:
          cpus: "${APPLICATION_DEPLOY_CPU}"
          memory: ${APPLICATION_DEPLOY_MEMORY}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: any
      labels:
        - traefik.http.routers.${STACK_SERVICE_NAME}.entryPoints=http,https
        - traefik.http.routers.${STACK_SERVICE_NAME}.tls=${STACK_TRAEFIK_TLS_ENABLED}
        - traefik.http.routers.${STACK_SERVICE_NAME}.rule=HostRegexp(`{subdomain:${STACK_SERVICE_HOSTNAME_PROXY}.*}`)
        - traefik.http.routers.${STACK_SERVICE_NAME}.service=${STACK_SERVICE_NAME}
        - traefik.http.services.${STACK_SERVICE_NAME}.loadbalancer.server.port=4317
        - traefik.docker.network=${STACK_NETWORK_DEFAULT}
    networks:
      - stack-nt-sre

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.69.0
    hostname: ${STACK_SERVICE_HOSTNAME}
    depends_on:
      - jaeger
      - zipkin
    environment:
      TZ: ${STACK_TZ}
    command: 
      - --config=/otel-collector-config.yml
    volumes:
      - ${STACK_INFRA_CONF_DIR}/opentelemetry/otel-collector-config.yml:/otel-collector-config.yml
      #- ${STACK_INFRA_CONF_DIR}/opentelemetry/otelcol-config.yml:/etc/otelcol-config.yml
      #- ${STACK_INFRA_CONF_DIR}/opentelemetry/otelcol-config-extras.yml:/etc/otelcol-config-extras.yml

    # ports:
    #   - 1888   # pprof extension
    #   - 8888   # Prometheus metrics exposed by the collector
    #   - 8889   # Prometheus exporter metrics
    #   - 13133 # health_check extension
    #   - 9411   # Zipkin receiver
    #   - 55679 # zpages extension

    # # ports:
    # #   - "4317"     # OTLP over gRPC receiver
    # #   - "4318"     # OTLP over HTTP receiver
    # #   - "9464"     # Prometheus exporter
    # #   - "8888"     # metrics endpoint

    # ports:
    #   # # OTLP over gRPC receiver
    #   # - target: 4317
    #   #   protocol: tcp
    #   #   mode: ingress

    #   # # OTLP over HTTP receiver
    #   # - target: 4318
    #   #   protocol: tcp
    #   #   mode: ingress

    #   # Prometheus exporter
    #   - target: 9464
    #     protocol: tcp
    #     mode: ingress

    #   # metrics endpoint
    #   - target: 8888
    #     protocol: tcp
    #     mode: ingress

    deploy:
      mode: global
      placement:
        constraints:
          - ${APPLICATION_DEPLOY_NODE_TOOL}
      resources:
        limits:
          cpus: "${APPLICATION_DEPLOY_CPU}"
          memory: ${APPLICATION_DEPLOY_MEMORY}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: any
    networks:
      - stack-nt-sre

  zipkin:
    image: openzipkin/zipkin
    hostname: ${STACK_SERVICE_HOSTNAME}
    environment:
      TZ: ${STACK_TZ}

    # ports:
    #   - target: 9411
    #     protocol: tcp
    deploy:
      mode: global
      placement:
        constraints:
          - ${APPLICATION_DEPLOY_NODE_TOOL}
      resources:
        limits:
          cpus: "${APPLICATION_DEPLOY_CPU}"
          memory: ${APPLICATION_DEPLOY_MEMORY}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: any
    networks:
      - stack-nt-sre

  # Expose the backend on http://localhost:9000
  zipkin-backend:
    image: openzipkin/example-sleuth-webmvc
    environment:
      TZ: ${STACK_TZ}
      JAVA_OPTS: -Dspring.zipkin.baseUrl=http://${STACK_SERVICE_HOSTNAME_ZIPKIN}:9411

    command: Backend
    # ports:
    #   - target: 9000
    #     protocol: tcp
    depends_on:
      - otel-collector
    deploy:
      mode: global
      resources:
         limits:
           cpus: "${APPLICATION_DEPLOY_CPU}"
           memory: ${APPLICATION_DEPLOY_MEMORY}
      restart_policy:
        condition: any
    networks:
      - stack-nt-sre

  zipkin-frontend:
    image: openzipkin/example-sleuth-webmvc
    depends_on:
      - otel-collector
      - backend
    command: Frontend
    environment:
      TZ: ${STACK_TZ}
      JAVA_OPTS: -Dspring.zipkin.baseUrl=http://${STACK_SERVICE_HOSTNAME_ZIPKIN}:9411
    # ports:
    #   - target: 8081
    #     protocol: tcp
    #     mode: ingress
    deploy:
      mode: global
      placement:
        constraints:
          - ${APPLICATION_DEPLOY_NODE_TOOL}
      resources:
        limits:
          cpus: "${APPLICATION_DEPLOY_CPU}"
          memory: ${APPLICATION_DEPLOY_MEMORY}
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: any
      labels:
        - traefik.docker.network=${STACK_NETWORK_DEFAULT}
        - traefik.http.routers.${STACK_SERVICE_NAME}.entryPoints=http,https
        - traefik.http.routers.${STACK_SERVICE_NAME}.tls=${STACK_TRAEFIK_TLS_ENABLED}
        - traefik.http.routers.${STACK_SERVICE_NAME}.rule=HostRegexp(`{subdomain:${STACK_SERVICE_HOSTNAME_PROXY}.*}`)
        - traefik.http.routers.${STACK_SERVICE_NAME}.service=${STACK_SERVICE_NAME}
        - traefik.http.services.${STACK_SERVICE_NAME}.loadbalancer.server.port=8081
    networks:
      - stack-nt
      - stack-nt-sre