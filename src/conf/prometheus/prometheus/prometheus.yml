# my global config
global:
  scrape_interval:     15s # By default, scrape targets every 15 seconds.
  evaluation_interval: 15s # By default, scrape targets every 15 seconds.
  scrape_timeout:      15s
  # scrape_timeout is set to the global default (10s).

  # Attach these labels to any time series or alerts when communicating with
  # external systems (federation, remote storage, Alertmanager).
  external_labels:
      monitor: 'observability'

# Load and evaluate rules in this file every 'evaluation_interval' seconds.
rule_files:
  - 'alert.rules'
  # - "first.rules"
  # - "second.rules"

# alert
alerting:
  alertmanagers:
  - scheme: http
    static_configs:
    - targets:
      - "${STACK_SERVICE_HOSTNAME_ALERTMANAGER}:9093"

# A scrape configuration containing exactly one endpoint to scrape:
# Here it's Prometheus itself.
scrape_configs:
  - job_name: 'prometheus'
    scrape_interval: 15s
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'jenkins'
    scheme: http
    metrics_path: '/metrics'
    params:
      format: ['prometheus']
    scrape_interval: 15s
    scrape_timeout: 5s
    static_configs:
      - targets: ['${STACK_SERVICE_HOSTNAME_JENKINS}:3000']

  - job_name: 'grafana'
    scheme: http
    metrics_path: '/metrics'
    params:
      format: ['prometheus']
    scrape_interval: 15s
    scrape_timeout: 5s
    static_configs:
      - targets: ['${STACK_SERVICE_HOSTNAME_GRAFANA}:3000']

  - job_name: 'cadvisor'
    scrape_interval: 15s
    scrape_timeout: 5s
    # dns_sd_configs:
    # - names:
    #   - 'tasks.cadvisor'
    #   type: 'A'
    #   port: 8080
    static_configs:
     - targets: ['${STACK_SERVICE_HOSTNAME_CADVISOR}:8080']

  - job_name: 'node-exporter'
    scrape_interval: 15s
    scrape_timeout: 5s
    # dns_sd_configs:
    # - names:
    #   - 'tasks.node-exporter'
    #   type: 'A'
    #   port: 9100
    static_configs:
     - targets: ['${STACK_SERVICE_HOSTNAME_NODE_EXPORTER}:9100']

  - job_name: 'pushgateway'
    scrape_interval: 15s
    scrape_timeout: 5s
    # dns_sd_configs:
    # - names:
    #   - 'tasks.pushgateway'
    #   type: 'A'
    #   port: 9091
    static_configs:
     - targets: ['${STACK_SERVICE_HOSTNAME_PUSHGATEWAY}:9091']

  #ref
  #   https://prometheus.io/docs/guides/multi-target-exporter/
  #   https://github.com/prometheus/prometheus/blob/main/config/testdata/conf.good.yml
  # - job_name: 'api-melody'
  #   scheme: http
  #   metrics_path: '/monitoring'
  #   params:
  #     format: ['prometheus']
  #   scrape_interval: 15s
  #   dns_sd_configs:
  #    - names:
  #      - 'tasks.java.api'
  #      type: 'A'
  #      port: 8080
  #   static_configs:
  #     - targets: ["app-dns.local:8080"]

  #ref https://doc.traefik.io/traefik/observability/metrics/prometheus/
  - job_name: 'traefik'
    scheme: http
    metrics_path: '/metrics'
    params:
      format: ['prometheus']
    scrape_interval: 15s   
    # dns_sd_configs:
    # - names:
    #   - 'tasks.traefik'
    #   type: 'A'
    #   port: 8082
    static_configs:
     - targets: ['${STACK_SERVICE_HOSTNAME_TRAEFIK}:8082']

  #ref https://prometheus.io/docs/guides/dockerswarm/
  # Create a job for Docker daemons.
  - job_name: 'docker-swarm-daemons'
    dockerswarm_sd_configs:
      - host: unix:///var/run/docker.sock
        role: nodes
    relabel_configs:
      # Fetch metrics on port 9323.
      - source_labels: [__meta_dockerswarm_node_address]
        target_label: __address__
        replacement: $1:9323
      # Set hostname as instance label
      - source_labels: [__meta_dockerswarm_node_hostname]
        target_label: instance

  #ref https://prometheus.io/docs/guides/dockerswarm/
  # Create a job for Docker Swarm containers.
  - job_name: 'docker-swarm-containers'
    dockerswarm_sd_configs:
      - host: unix:///var/run/docker.sock
        role: tasks
    relabel_configs:
      # Only keep containers that should be running.
      - source_labels: [__meta_dockerswarm_task_desired_state]
        regex: running
        action: keep
      # Only keep containers that have a `prometheus-job` label.
      - source_labels: [__meta_dockerswarm_service_label_prometheus_job]
        regex: .+
        action: keep
      # Use the prometheus-job Swarm label as Prometheus job label.
      - source_labels: [__meta_dockerswarm_service_label_prometheus_job]
        target_label: job

  - job_name: postgres-exporter
    static_configs:
      - targets: ['${STACK_SERVICE_HOSTNAME_KEYCLOAK_PG}:9187','${STACK_SERVICE_HOSTNAME_GRAFANA_PG}:9187','${STACK_SERVICE_HOSTNAME_WIKIJS_PG}:9187']

  - job_name: 'tempo'
    static_configs:
      - targets: [ '${STACK_SERVICE_HOSTNAME_TEMPO}:3200' ]

  - job_name: 'otel-collector'
    scrape_interval: 10s
    static_configs:
    - targets: ['${STACK_SERVICE_HOSTNAME_OPENTELEMETRIC}:8888', '${STACK_SERVICE_HOSTNAME_OPENTELEMETRIC}:8889']
    
  - job_name: 'blackbox'
    metrics_path: /probe
    params:
      module: [http_2xx]  # Look for a HTTP 200 response.
    static_configs:
      - targets:
        - http://${STACK_SERVICE_HOSTNAME_CADVISOR}:8080
        - http://${STACK_SERVICE_HOSTNAME_GRAFANA}:3000
        - http://${STACK_SERVICE_HOSTNAME_JAEGER}:4317
        - http://${STACK_SERVICE_HOSTNAME_ZIPKIN}:9411
        - http://${STACK_SERVICE_HOSTNAME_JENKINS}:50000
        - http://${STACK_SERVICE_HOSTNAME_LOKI}:3100
        - http://${STACK_SERVICE_HOSTNAME_OPENTELEMETRIC}:8888
        - http://${STACK_SERVICE_HOSTNAME_PORTNAINER}:8000
        - http://${STACK_SERVICE_HOSTNAME_PROMETHEUS}:9090
        - http://${STACK_SERVICE_HOSTNAME_PROMTAIL}:80
        - http://${STACK_SERVICE_HOSTNAME_ALERTMANAGER}:9093
        - http://${STACK_SERVICE_HOSTNAME_ALERTMANAGER_CALERT}:6000
        - http://${STACK_SERVICE_HOSTNAME_BACKBOX_EXPORTER}:9115
        - http://${STACK_SERVICE_HOSTNAME_REGISTRY}:5000
        - http://${STACK_SERVICE_HOSTNAME_TEMPO}:3200
        - http://${STACK_SERVICE_HOSTNAME_TRAEFIK}:80
        - http://${STACK_SERVICE_HOSTNAME_WIKIJS}:3000
        - http://${STACK_SERVICE_HOSTNAME_KEYCLOAK}:8080

        
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: "${STACK_SERVICE_HOSTNAME_BACKBOX_EXPORTER}:9115"  # Blackbox exporter.
      - target_label: region
        replacement: "local"